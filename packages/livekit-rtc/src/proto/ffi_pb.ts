// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file ffi.proto (package livekit.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ConnectCallback, ConnectRequest, ConnectResponse, DisconnectCallback, DisconnectRequest, DisconnectResponse, GetSessionStatsCallback, GetSessionStatsRequest, GetSessionStatsResponse, PublishDataCallback, PublishDataRequest, PublishDataResponse, PublishTrackCallback, PublishTrackRequest, PublishTrackResponse, RoomEvent, SetSubscribedRequest, SetSubscribedResponse, UnpublishTrackCallback, UnpublishTrackRequest, UnpublishTrackResponse, UpdateLocalMetadataCallback, UpdateLocalMetadataRequest, UpdateLocalMetadataResponse, UpdateLocalNameCallback, UpdateLocalNameRequest, UpdateLocalNameResponse } from "./room_pb.js";
import { CreateAudioTrackRequest, CreateAudioTrackResponse, CreateVideoTrackRequest, CreateVideoTrackResponse, GetStatsCallback, GetStatsRequest, GetStatsResponse, TrackEvent } from "./track_pb.js";
import { CaptureVideoFrameRequest, CaptureVideoFrameResponse, NewVideoSourceRequest, NewVideoSourceResponse, NewVideoStreamRequest, NewVideoStreamResponse, VideoConvertRequest, VideoConvertResponse, VideoStreamEvent } from "./video_frame_pb.js";
import { AudioStreamEvent, CaptureAudioFrameCallback, CaptureAudioFrameRequest, CaptureAudioFrameResponse, NewAudioResamplerRequest, NewAudioResamplerResponse, NewAudioSourceRequest, NewAudioSourceResponse, NewAudioStreamRequest, NewAudioStreamResponse, RemixAndResampleRequest, RemixAndResampleResponse } from "./audio_frame_pb.js";
import { E2eeRequest, E2eeResponse } from "./e2ee_pb.js";

/**
 * @generated from enum livekit.proto.LogLevel
 */
export enum LogLevel {
  /**
   * @generated from enum value: LOG_ERROR = 0;
   */
  LOG_ERROR = 0,

  /**
   * @generated from enum value: LOG_WARN = 1;
   */
  LOG_WARN = 1,

  /**
   * @generated from enum value: LOG_INFO = 2;
   */
  LOG_INFO = 2,

  /**
   * @generated from enum value: LOG_DEBUG = 3;
   */
  LOG_DEBUG = 3,

  /**
   * @generated from enum value: LOG_TRACE = 4;
   */
  LOG_TRACE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(LogLevel)
proto3.util.setEnumType(LogLevel, "livekit.proto.LogLevel", [
  { no: 0, name: "LOG_ERROR" },
  { no: 1, name: "LOG_WARN" },
  { no: 2, name: "LOG_INFO" },
  { no: 3, name: "LOG_DEBUG" },
  { no: 4, name: "LOG_TRACE" },
]);

/**
 * This is the input of livekit_ffi_request function
 * We always expect a response (FFIResponse, even if it's empty)
 *
 * @generated from message livekit.proto.FfiRequest
 */
export class FfiRequest extends Message<FfiRequest> {
  /**
   * @generated from oneof livekit.proto.FfiRequest.message
   */
  message: {
    /**
     * @generated from field: livekit.proto.DisposeRequest dispose = 2;
     */
    value: DisposeRequest;
    case: "dispose";
  } | {
    /**
     * Room
     *
     * @generated from field: livekit.proto.ConnectRequest connect = 3;
     */
    value: ConnectRequest;
    case: "connect";
  } | {
    /**
     * @generated from field: livekit.proto.DisconnectRequest disconnect = 4;
     */
    value: DisconnectRequest;
    case: "disconnect";
  } | {
    /**
     * @generated from field: livekit.proto.PublishTrackRequest publish_track = 5;
     */
    value: PublishTrackRequest;
    case: "publishTrack";
  } | {
    /**
     * @generated from field: livekit.proto.UnpublishTrackRequest unpublish_track = 6;
     */
    value: UnpublishTrackRequest;
    case: "unpublishTrack";
  } | {
    /**
     * @generated from field: livekit.proto.PublishDataRequest publish_data = 7;
     */
    value: PublishDataRequest;
    case: "publishData";
  } | {
    /**
     * @generated from field: livekit.proto.SetSubscribedRequest set_subscribed = 8;
     */
    value: SetSubscribedRequest;
    case: "setSubscribed";
  } | {
    /**
     * @generated from field: livekit.proto.UpdateLocalMetadataRequest update_local_metadata = 9;
     */
    value: UpdateLocalMetadataRequest;
    case: "updateLocalMetadata";
  } | {
    /**
     * @generated from field: livekit.proto.UpdateLocalNameRequest update_local_name = 10;
     */
    value: UpdateLocalNameRequest;
    case: "updateLocalName";
  } | {
    /**
     * @generated from field: livekit.proto.GetSessionStatsRequest get_session_stats = 11;
     */
    value: GetSessionStatsRequest;
    case: "getSessionStats";
  } | {
    /**
     * Track
     *
     * @generated from field: livekit.proto.CreateVideoTrackRequest create_video_track = 12;
     */
    value: CreateVideoTrackRequest;
    case: "createVideoTrack";
  } | {
    /**
     * @generated from field: livekit.proto.CreateAudioTrackRequest create_audio_track = 13;
     */
    value: CreateAudioTrackRequest;
    case: "createAudioTrack";
  } | {
    /**
     * @generated from field: livekit.proto.GetStatsRequest get_stats = 14;
     */
    value: GetStatsRequest;
    case: "getStats";
  } | {
    /**
     * Video
     *
     * @generated from field: livekit.proto.NewVideoStreamRequest new_video_stream = 16;
     */
    value: NewVideoStreamRequest;
    case: "newVideoStream";
  } | {
    /**
     * @generated from field: livekit.proto.NewVideoSourceRequest new_video_source = 17;
     */
    value: NewVideoSourceRequest;
    case: "newVideoSource";
  } | {
    /**
     * @generated from field: livekit.proto.CaptureVideoFrameRequest capture_video_frame = 18;
     */
    value: CaptureVideoFrameRequest;
    case: "captureVideoFrame";
  } | {
    /**
     * @generated from field: livekit.proto.VideoConvertRequest video_convert = 19;
     */
    value: VideoConvertRequest;
    case: "videoConvert";
  } | {
    /**
     * Audio
     *
     * @generated from field: livekit.proto.NewAudioStreamRequest new_audio_stream = 22;
     */
    value: NewAudioStreamRequest;
    case: "newAudioStream";
  } | {
    /**
     * @generated from field: livekit.proto.NewAudioSourceRequest new_audio_source = 23;
     */
    value: NewAudioSourceRequest;
    case: "newAudioSource";
  } | {
    /**
     * @generated from field: livekit.proto.CaptureAudioFrameRequest capture_audio_frame = 24;
     */
    value: CaptureAudioFrameRequest;
    case: "captureAudioFrame";
  } | {
    /**
     * @generated from field: livekit.proto.NewAudioResamplerRequest new_audio_resampler = 25;
     */
    value: NewAudioResamplerRequest;
    case: "newAudioResampler";
  } | {
    /**
     * @generated from field: livekit.proto.RemixAndResampleRequest remix_and_resample = 26;
     */
    value: RemixAndResampleRequest;
    case: "remixAndResample";
  } | {
    /**
     * @generated from field: livekit.proto.E2eeRequest e2ee = 27;
     */
    value: E2eeRequest;
    case: "e2ee";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<FfiRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.FfiRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "dispose", kind: "message", T: DisposeRequest, oneof: "message" },
    { no: 3, name: "connect", kind: "message", T: ConnectRequest, oneof: "message" },
    { no: 4, name: "disconnect", kind: "message", T: DisconnectRequest, oneof: "message" },
    { no: 5, name: "publish_track", kind: "message", T: PublishTrackRequest, oneof: "message" },
    { no: 6, name: "unpublish_track", kind: "message", T: UnpublishTrackRequest, oneof: "message" },
    { no: 7, name: "publish_data", kind: "message", T: PublishDataRequest, oneof: "message" },
    { no: 8, name: "set_subscribed", kind: "message", T: SetSubscribedRequest, oneof: "message" },
    { no: 9, name: "update_local_metadata", kind: "message", T: UpdateLocalMetadataRequest, oneof: "message" },
    { no: 10, name: "update_local_name", kind: "message", T: UpdateLocalNameRequest, oneof: "message" },
    { no: 11, name: "get_session_stats", kind: "message", T: GetSessionStatsRequest, oneof: "message" },
    { no: 12, name: "create_video_track", kind: "message", T: CreateVideoTrackRequest, oneof: "message" },
    { no: 13, name: "create_audio_track", kind: "message", T: CreateAudioTrackRequest, oneof: "message" },
    { no: 14, name: "get_stats", kind: "message", T: GetStatsRequest, oneof: "message" },
    { no: 16, name: "new_video_stream", kind: "message", T: NewVideoStreamRequest, oneof: "message" },
    { no: 17, name: "new_video_source", kind: "message", T: NewVideoSourceRequest, oneof: "message" },
    { no: 18, name: "capture_video_frame", kind: "message", T: CaptureVideoFrameRequest, oneof: "message" },
    { no: 19, name: "video_convert", kind: "message", T: VideoConvertRequest, oneof: "message" },
    { no: 22, name: "new_audio_stream", kind: "message", T: NewAudioStreamRequest, oneof: "message" },
    { no: 23, name: "new_audio_source", kind: "message", T: NewAudioSourceRequest, oneof: "message" },
    { no: 24, name: "capture_audio_frame", kind: "message", T: CaptureAudioFrameRequest, oneof: "message" },
    { no: 25, name: "new_audio_resampler", kind: "message", T: NewAudioResamplerRequest, oneof: "message" },
    { no: 26, name: "remix_and_resample", kind: "message", T: RemixAndResampleRequest, oneof: "message" },
    { no: 27, name: "e2ee", kind: "message", T: E2eeRequest, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FfiRequest {
    return new FfiRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FfiRequest {
    return new FfiRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FfiRequest {
    return new FfiRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FfiRequest | PlainMessage<FfiRequest> | undefined, b: FfiRequest | PlainMessage<FfiRequest> | undefined): boolean {
    return proto3.util.equals(FfiRequest, a, b);
  }
}

/**
 * This is the output of livekit_ffi_request function.
 *
 * @generated from message livekit.proto.FfiResponse
 */
export class FfiResponse extends Message<FfiResponse> {
  /**
   * @generated from oneof livekit.proto.FfiResponse.message
   */
  message: {
    /**
     * @generated from field: livekit.proto.DisposeResponse dispose = 2;
     */
    value: DisposeResponse;
    case: "dispose";
  } | {
    /**
     * Room
     *
     * @generated from field: livekit.proto.ConnectResponse connect = 3;
     */
    value: ConnectResponse;
    case: "connect";
  } | {
    /**
     * @generated from field: livekit.proto.DisconnectResponse disconnect = 4;
     */
    value: DisconnectResponse;
    case: "disconnect";
  } | {
    /**
     * @generated from field: livekit.proto.PublishTrackResponse publish_track = 5;
     */
    value: PublishTrackResponse;
    case: "publishTrack";
  } | {
    /**
     * @generated from field: livekit.proto.UnpublishTrackResponse unpublish_track = 6;
     */
    value: UnpublishTrackResponse;
    case: "unpublishTrack";
  } | {
    /**
     * @generated from field: livekit.proto.PublishDataResponse publish_data = 7;
     */
    value: PublishDataResponse;
    case: "publishData";
  } | {
    /**
     * @generated from field: livekit.proto.SetSubscribedResponse set_subscribed = 8;
     */
    value: SetSubscribedResponse;
    case: "setSubscribed";
  } | {
    /**
     * @generated from field: livekit.proto.UpdateLocalMetadataResponse update_local_metadata = 9;
     */
    value: UpdateLocalMetadataResponse;
    case: "updateLocalMetadata";
  } | {
    /**
     * @generated from field: livekit.proto.UpdateLocalNameResponse update_local_name = 10;
     */
    value: UpdateLocalNameResponse;
    case: "updateLocalName";
  } | {
    /**
     * @generated from field: livekit.proto.GetSessionStatsResponse get_session_stats = 11;
     */
    value: GetSessionStatsResponse;
    case: "getSessionStats";
  } | {
    /**
     * Track
     *
     * @generated from field: livekit.proto.CreateVideoTrackResponse create_video_track = 12;
     */
    value: CreateVideoTrackResponse;
    case: "createVideoTrack";
  } | {
    /**
     * @generated from field: livekit.proto.CreateAudioTrackResponse create_audio_track = 13;
     */
    value: CreateAudioTrackResponse;
    case: "createAudioTrack";
  } | {
    /**
     * @generated from field: livekit.proto.GetStatsResponse get_stats = 14;
     */
    value: GetStatsResponse;
    case: "getStats";
  } | {
    /**
     * Video
     *
     * @generated from field: livekit.proto.NewVideoStreamResponse new_video_stream = 16;
     */
    value: NewVideoStreamResponse;
    case: "newVideoStream";
  } | {
    /**
     * @generated from field: livekit.proto.NewVideoSourceResponse new_video_source = 17;
     */
    value: NewVideoSourceResponse;
    case: "newVideoSource";
  } | {
    /**
     * @generated from field: livekit.proto.CaptureVideoFrameResponse capture_video_frame = 18;
     */
    value: CaptureVideoFrameResponse;
    case: "captureVideoFrame";
  } | {
    /**
     * @generated from field: livekit.proto.VideoConvertResponse video_convert = 19;
     */
    value: VideoConvertResponse;
    case: "videoConvert";
  } | {
    /**
     * Audio
     *
     * @generated from field: livekit.proto.NewAudioStreamResponse new_audio_stream = 22;
     */
    value: NewAudioStreamResponse;
    case: "newAudioStream";
  } | {
    /**
     * @generated from field: livekit.proto.NewAudioSourceResponse new_audio_source = 23;
     */
    value: NewAudioSourceResponse;
    case: "newAudioSource";
  } | {
    /**
     * @generated from field: livekit.proto.CaptureAudioFrameResponse capture_audio_frame = 24;
     */
    value: CaptureAudioFrameResponse;
    case: "captureAudioFrame";
  } | {
    /**
     * @generated from field: livekit.proto.NewAudioResamplerResponse new_audio_resampler = 25;
     */
    value: NewAudioResamplerResponse;
    case: "newAudioResampler";
  } | {
    /**
     * @generated from field: livekit.proto.RemixAndResampleResponse remix_and_resample = 26;
     */
    value: RemixAndResampleResponse;
    case: "remixAndResample";
  } | {
    /**
     * @generated from field: livekit.proto.E2eeResponse e2ee = 27;
     */
    value: E2eeResponse;
    case: "e2ee";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<FfiResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.FfiResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "dispose", kind: "message", T: DisposeResponse, oneof: "message" },
    { no: 3, name: "connect", kind: "message", T: ConnectResponse, oneof: "message" },
    { no: 4, name: "disconnect", kind: "message", T: DisconnectResponse, oneof: "message" },
    { no: 5, name: "publish_track", kind: "message", T: PublishTrackResponse, oneof: "message" },
    { no: 6, name: "unpublish_track", kind: "message", T: UnpublishTrackResponse, oneof: "message" },
    { no: 7, name: "publish_data", kind: "message", T: PublishDataResponse, oneof: "message" },
    { no: 8, name: "set_subscribed", kind: "message", T: SetSubscribedResponse, oneof: "message" },
    { no: 9, name: "update_local_metadata", kind: "message", T: UpdateLocalMetadataResponse, oneof: "message" },
    { no: 10, name: "update_local_name", kind: "message", T: UpdateLocalNameResponse, oneof: "message" },
    { no: 11, name: "get_session_stats", kind: "message", T: GetSessionStatsResponse, oneof: "message" },
    { no: 12, name: "create_video_track", kind: "message", T: CreateVideoTrackResponse, oneof: "message" },
    { no: 13, name: "create_audio_track", kind: "message", T: CreateAudioTrackResponse, oneof: "message" },
    { no: 14, name: "get_stats", kind: "message", T: GetStatsResponse, oneof: "message" },
    { no: 16, name: "new_video_stream", kind: "message", T: NewVideoStreamResponse, oneof: "message" },
    { no: 17, name: "new_video_source", kind: "message", T: NewVideoSourceResponse, oneof: "message" },
    { no: 18, name: "capture_video_frame", kind: "message", T: CaptureVideoFrameResponse, oneof: "message" },
    { no: 19, name: "video_convert", kind: "message", T: VideoConvertResponse, oneof: "message" },
    { no: 22, name: "new_audio_stream", kind: "message", T: NewAudioStreamResponse, oneof: "message" },
    { no: 23, name: "new_audio_source", kind: "message", T: NewAudioSourceResponse, oneof: "message" },
    { no: 24, name: "capture_audio_frame", kind: "message", T: CaptureAudioFrameResponse, oneof: "message" },
    { no: 25, name: "new_audio_resampler", kind: "message", T: NewAudioResamplerResponse, oneof: "message" },
    { no: 26, name: "remix_and_resample", kind: "message", T: RemixAndResampleResponse, oneof: "message" },
    { no: 27, name: "e2ee", kind: "message", T: E2eeResponse, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FfiResponse {
    return new FfiResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FfiResponse {
    return new FfiResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FfiResponse {
    return new FfiResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FfiResponse | PlainMessage<FfiResponse> | undefined, b: FfiResponse | PlainMessage<FfiResponse> | undefined): boolean {
    return proto3.util.equals(FfiResponse, a, b);
  }
}

/**
 * To minimize complexity, participant events are not included in the protocol.
 * It is easily deducible from the room events and it turned out that is is easier to implement
 * on the ffi client side.
 *
 * @generated from message livekit.proto.FfiEvent
 */
export class FfiEvent extends Message<FfiEvent> {
  /**
   * @generated from oneof livekit.proto.FfiEvent.message
   */
  message: {
    /**
     * @generated from field: livekit.proto.RoomEvent room_event = 1;
     */
    value: RoomEvent;
    case: "roomEvent";
  } | {
    /**
     * @generated from field: livekit.proto.TrackEvent track_event = 2;
     */
    value: TrackEvent;
    case: "trackEvent";
  } | {
    /**
     * @generated from field: livekit.proto.VideoStreamEvent video_stream_event = 3;
     */
    value: VideoStreamEvent;
    case: "videoStreamEvent";
  } | {
    /**
     * @generated from field: livekit.proto.AudioStreamEvent audio_stream_event = 4;
     */
    value: AudioStreamEvent;
    case: "audioStreamEvent";
  } | {
    /**
     * @generated from field: livekit.proto.ConnectCallback connect = 5;
     */
    value: ConnectCallback;
    case: "connect";
  } | {
    /**
     * @generated from field: livekit.proto.DisconnectCallback disconnect = 6;
     */
    value: DisconnectCallback;
    case: "disconnect";
  } | {
    /**
     * @generated from field: livekit.proto.DisposeCallback dispose = 7;
     */
    value: DisposeCallback;
    case: "dispose";
  } | {
    /**
     * @generated from field: livekit.proto.PublishTrackCallback publish_track = 8;
     */
    value: PublishTrackCallback;
    case: "publishTrack";
  } | {
    /**
     * @generated from field: livekit.proto.UnpublishTrackCallback unpublish_track = 9;
     */
    value: UnpublishTrackCallback;
    case: "unpublishTrack";
  } | {
    /**
     * @generated from field: livekit.proto.PublishDataCallback publish_data = 10;
     */
    value: PublishDataCallback;
    case: "publishData";
  } | {
    /**
     * @generated from field: livekit.proto.CaptureAudioFrameCallback capture_audio_frame = 11;
     */
    value: CaptureAudioFrameCallback;
    case: "captureAudioFrame";
  } | {
    /**
     * @generated from field: livekit.proto.UpdateLocalMetadataCallback update_local_metadata = 12;
     */
    value: UpdateLocalMetadataCallback;
    case: "updateLocalMetadata";
  } | {
    /**
     * @generated from field: livekit.proto.UpdateLocalNameCallback update_local_name = 13;
     */
    value: UpdateLocalNameCallback;
    case: "updateLocalName";
  } | {
    /**
     * @generated from field: livekit.proto.GetStatsCallback get_stats = 14;
     */
    value: GetStatsCallback;
    case: "getStats";
  } | {
    /**
     * @generated from field: livekit.proto.LogBatch logs = 15;
     */
    value: LogBatch;
    case: "logs";
  } | {
    /**
     * @generated from field: livekit.proto.GetSessionStatsCallback get_session_stats = 16;
     */
    value: GetSessionStatsCallback;
    case: "getSessionStats";
  } | {
    /**
     * @generated from field: livekit.proto.Panic panic = 17;
     */
    value: Panic;
    case: "panic";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<FfiEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.FfiEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_event", kind: "message", T: RoomEvent, oneof: "message" },
    { no: 2, name: "track_event", kind: "message", T: TrackEvent, oneof: "message" },
    { no: 3, name: "video_stream_event", kind: "message", T: VideoStreamEvent, oneof: "message" },
    { no: 4, name: "audio_stream_event", kind: "message", T: AudioStreamEvent, oneof: "message" },
    { no: 5, name: "connect", kind: "message", T: ConnectCallback, oneof: "message" },
    { no: 6, name: "disconnect", kind: "message", T: DisconnectCallback, oneof: "message" },
    { no: 7, name: "dispose", kind: "message", T: DisposeCallback, oneof: "message" },
    { no: 8, name: "publish_track", kind: "message", T: PublishTrackCallback, oneof: "message" },
    { no: 9, name: "unpublish_track", kind: "message", T: UnpublishTrackCallback, oneof: "message" },
    { no: 10, name: "publish_data", kind: "message", T: PublishDataCallback, oneof: "message" },
    { no: 11, name: "capture_audio_frame", kind: "message", T: CaptureAudioFrameCallback, oneof: "message" },
    { no: 12, name: "update_local_metadata", kind: "message", T: UpdateLocalMetadataCallback, oneof: "message" },
    { no: 13, name: "update_local_name", kind: "message", T: UpdateLocalNameCallback, oneof: "message" },
    { no: 14, name: "get_stats", kind: "message", T: GetStatsCallback, oneof: "message" },
    { no: 15, name: "logs", kind: "message", T: LogBatch, oneof: "message" },
    { no: 16, name: "get_session_stats", kind: "message", T: GetSessionStatsCallback, oneof: "message" },
    { no: 17, name: "panic", kind: "message", T: Panic, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FfiEvent {
    return new FfiEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FfiEvent {
    return new FfiEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FfiEvent {
    return new FfiEvent().fromJsonString(jsonString, options);
  }

  static equals(a: FfiEvent | PlainMessage<FfiEvent> | undefined, b: FfiEvent | PlainMessage<FfiEvent> | undefined): boolean {
    return proto3.util.equals(FfiEvent, a, b);
  }
}

/**
 * Stop all rooms synchronously (Do we need async here?).
 * e.g: This is used for the Unity Editor after each assemblies reload.
 * TODO(theomonnom): Implement a debug mode where we can find all leaked handles?
 *
 * @generated from message livekit.proto.DisposeRequest
 */
export class DisposeRequest extends Message<DisposeRequest> {
  /**
   * @generated from field: bool async = 1;
   */
  async = false;

  constructor(data?: PartialMessage<DisposeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.DisposeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisposeRequest {
    return new DisposeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisposeRequest {
    return new DisposeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisposeRequest {
    return new DisposeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DisposeRequest | PlainMessage<DisposeRequest> | undefined, b: DisposeRequest | PlainMessage<DisposeRequest> | undefined): boolean {
    return proto3.util.equals(DisposeRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.DisposeResponse
 */
export class DisposeResponse extends Message<DisposeResponse> {
  /**
   * None if sync
   *
   * @generated from field: optional uint64 async_id = 1;
   */
  asyncId?: bigint;

  constructor(data?: PartialMessage<DisposeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.DisposeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisposeResponse {
    return new DisposeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisposeResponse {
    return new DisposeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisposeResponse {
    return new DisposeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DisposeResponse | PlainMessage<DisposeResponse> | undefined, b: DisposeResponse | PlainMessage<DisposeResponse> | undefined): boolean {
    return proto3.util.equals(DisposeResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.DisposeCallback
 */
export class DisposeCallback extends Message<DisposeCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<DisposeCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.DisposeCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisposeCallback {
    return new DisposeCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisposeCallback {
    return new DisposeCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisposeCallback {
    return new DisposeCallback().fromJsonString(jsonString, options);
  }

  static equals(a: DisposeCallback | PlainMessage<DisposeCallback> | undefined, b: DisposeCallback | PlainMessage<DisposeCallback> | undefined): boolean {
    return proto3.util.equals(DisposeCallback, a, b);
  }
}

/**
 * @generated from message livekit.proto.LogRecord
 */
export class LogRecord extends Message<LogRecord> {
  /**
   * @generated from field: livekit.proto.LogLevel level = 1;
   */
  level = LogLevel.LOG_ERROR;

  /**
   * e.g "livekit", "libwebrtc", "tokio-tungstenite", etc...
   *
   * @generated from field: string target = 2;
   */
  target = "";

  /**
   * @generated from field: optional string module_path = 3;
   */
  modulePath?: string;

  /**
   * @generated from field: optional string file = 4;
   */
  file?: string;

  /**
   * @generated from field: optional uint32 line = 5;
   */
  line?: number;

  /**
   * @generated from field: string message = 6;
   */
  message = "";

  constructor(data?: PartialMessage<LogRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.LogRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "level", kind: "enum", T: proto3.getEnumType(LogLevel) },
    { no: 2, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "module_path", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "file", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "line", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 6, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogRecord {
    return new LogRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogRecord {
    return new LogRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogRecord {
    return new LogRecord().fromJsonString(jsonString, options);
  }

  static equals(a: LogRecord | PlainMessage<LogRecord> | undefined, b: LogRecord | PlainMessage<LogRecord> | undefined): boolean {
    return proto3.util.equals(LogRecord, a, b);
  }
}

/**
 * @generated from message livekit.proto.LogBatch
 */
export class LogBatch extends Message<LogBatch> {
  /**
   * @generated from field: repeated livekit.proto.LogRecord records = 1;
   */
  records: LogRecord[] = [];

  constructor(data?: PartialMessage<LogBatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.LogBatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "message", T: LogRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogBatch {
    return new LogBatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogBatch {
    return new LogBatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogBatch {
    return new LogBatch().fromJsonString(jsonString, options);
  }

  static equals(a: LogBatch | PlainMessage<LogBatch> | undefined, b: LogBatch | PlainMessage<LogBatch> | undefined): boolean {
    return proto3.util.equals(LogBatch, a, b);
  }
}

/**
 * @generated from message livekit.proto.Panic
 */
export class Panic extends Message<Panic> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<Panic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.Panic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Panic {
    return new Panic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Panic {
    return new Panic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Panic {
    return new Panic().fromJsonString(jsonString, options);
  }

  static equals(a: Panic | PlainMessage<Panic> | undefined, b: Panic | PlainMessage<Panic> | undefined): boolean {
    return proto3.util.equals(Panic, a, b);
  }
}

